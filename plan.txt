
Read in: ver 1
	get number of ants and number of rooms  and start/stop rooms (save names).
		(coordinates will only be taken by the visualzer)
	malloc array of size number of rooms
	read links and add rooms to array with hashing function
		(
			ie.
			rm1-rm2
			add rm1 awith hashing
			add rm2 with hashing
			add index of rm2 to linked list of rm1 neighbors
			add index of rm1 to linked list of rm2 neighbors
		)

	read links and set to each node linked list of array indexs
------------------------------------------------------------------------------------------------------------------------
Read in: ver 2
	get number of ants
	add rooms to dynamic array and set start/stop rooms
		(coordinates will only be taken by the visualzer)
	reset array as hash table
	read links and set to each node linked list of array indexs

------------------------------------------------------------------------------------------------------------------------
Algorithm:
(keep adding paths until you have reached the max_flow# || #moves > single_file || #moves > #previous#moves)
(if number of paths < max_flow backtrack untill max_flow is found and #moves < single_file (on shortest path) || #moves is > than previous iteration (backtrack))

set max_flow as MIN(number of links at start, end)

while (number of paths < max_flow && path is unvisited)
{
	find shortest path from start to end using BFS and save (P1, P2...Pn) (mark rooms as visited)
		(first time save initial shortest path)
		(calculate and save single_file #of moves = #rooms on initial shortest path (minus start and stop) + #ants)
	if (no path is found && number of paths < max_flow)
		backtrack (WORK ON THIS)
	previos#moves = single_file
	current#moves = previous#moves
	if (number of paths > 1)
		divide num of ants by #paths (and distribute from shortet path to longest path)
		current#moves = MAX(#moves(P1), ... #moves(Pn))
	if (current#moves > previous#moves)
		use previous set of moves
		break;
	previous#moves = current#moves;
}

------------------------------------------------------------------------------------------------------------------------

Output:

------------------------------------------------------------------------------------------------------------------------

Visualizer:
	



